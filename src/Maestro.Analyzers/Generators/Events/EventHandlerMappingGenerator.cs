using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Maestro.Analyzers.Generators.Web;

[Generator]
public class EventHandlerMappingGenerator : IIncrementalGenerator
{
    private record EventHandlerMapping(ITypeSymbol EventHandlerSymbol, ITypeSymbol? TypeArgument);

    const string eventHandlerInterface = "Maestro.Core.IEventHandler<T>";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<ClassDeclarationSyntax?> syntaxProvider = context.SyntaxProvider.CreateSyntaxProvider(
            static (syntaxNode, ct) => syntaxNode is ClassDeclarationSyntax,
            static (context, ct) => context.Node as ClassDeclarationSyntax
        );

        IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax?>)> records
            = context.CompilationProvider.Combine(syntaxProvider.Collect());

        context.RegisterSourceOutput(records, (context, input) =>
        {
            var compilation = input.Item1;
            var items = input.Item2;
            var matches = items.Where(x => x?.SyntaxTree is not null)
                .Select(x => compilation.GetSemanticModel(x!.SyntaxTree)?.GetDeclaredSymbol(x))
                .Where(x => x is not null && x is INamedTypeSymbol)
                .Cast<INamedTypeSymbol>()
                .Select(x => new EventHandlerMapping(x,
                    x.AllInterfaces
                        .FirstOrDefault(x => x.OriginalDefinition?.ToDisplayString() == eventHandlerInterface)
                        ?.TypeArguments.FirstOrDefault()))
                .Where(x => x.TypeArgument is not null)
                .ToImmutableArray();
            if (matches.Any())
            {
                var body = string.Join("\n        ",
                    matches.Select(x =>
                        @$"services.AddSingleton<IEventHandler<global::{x.TypeArgument!.ToDisplayString()}>, global::{x!.EventHandlerSymbol.ToDisplayString()}>();"));
                context.AddSource("AutoEventHandlerMapping.g.cs", SourceText.From($@"
// <auto-generated />
using Maestro.Core;
using Microsoft.Extensions.DependencyInjection;
namespace Maestro.Events;

public static partial class AutoEventHandlerMapping {{
    static partial void RegisterEventHandlers(IServiceCollection services){{
        {body}
    }}

}}
                ", Encoding.UTF8));
            }
        });
    }
}
