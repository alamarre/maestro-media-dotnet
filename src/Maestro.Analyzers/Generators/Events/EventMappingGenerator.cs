using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Maestro.Analyzers.Generators.Web;

[Generator]
public class EventMappingGenerator : IIncrementalGenerator
{
    private record EventMapping(ITypeSymbol EventSymbol, string? EventId);
    const string eventAttribute = "Maestro.Core.EventAttribute";
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		IncrementalValuesProvider<RecordDeclarationSyntax?> syntaxProvider = context.SyntaxProvider.CreateSyntaxProvider(
			static (syntaxNode, ct) => syntaxNode is RecordDeclarationSyntax,
			static (context, ct) => context.Node as RecordDeclarationSyntax
		);

		IncrementalValueProvider<(Compilation, ImmutableArray<RecordDeclarationSyntax?>)> records
				= context.CompilationProvider.Combine(syntaxProvider.Collect());

        context.RegisterSourceOutput(records, (context, input) =>
		{
			var compilation = input.Item1;
			var items = input.Item2;
			var matches = items.Where(x => x?.SyntaxTree is not null).Select(x => compilation.GetSemanticModel(x!.SyntaxTree)?.GetDeclaredSymbol(x))
				.Where(x => x is not null && x is ITypeSymbol typeSymbol)
				.Cast<ITypeSymbol>()
                .Select(x => new EventMapping(x, x.GetAttributes().FirstOrDefault(x => x.AttributeClass?.ToDisplayString() == eventAttribute)?.ConstructorArguments.First().Value?.ToString()))
				.Where(x => x.EventId is not null)
                .ToImmutableArray();
			if (matches.Any())
			{

                var body = string.Join("\n        ", matches.Select(x => @$"{{ ""{x.EventId}"", typeof(global::{x.EventSymbol.ToDisplayString()}) }}"));
				context.AddSource("EventMappings.g.cs", SourceText.From($@"
// <auto-generated />
using System.Collections.Immutable;
namespace Maestro.Events;

public static partial class AutoEventMapping {{
    static partial void Initialize() {{
        IdsToEvents = new Dictionary<string, global::System.Type> {{
            {body}
        }}.ToImmutableDictionary();
    }}

}}
                ", Encoding.UTF8));
			}
		});
	}


}