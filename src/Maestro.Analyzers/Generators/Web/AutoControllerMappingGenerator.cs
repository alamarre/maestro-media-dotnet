using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Maestro.Analyzers.Generators.Web;

[Generator]
public class AutoControllerMappingGenerator : IIncrementalGenerator
{
    const string controllerInterface = "Maestro.Controllers.IController";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        IncrementalValuesProvider<ClassDeclarationSyntax?> syntaxProvider = context.SyntaxProvider.CreateSyntaxProvider(
            static (syntaxNode, ct) => syntaxNode is ClassDeclarationSyntax,
            static (context, ct) => context.Node as ClassDeclarationSyntax
        );

        IncrementalValueProvider<(Compilation, ImmutableArray<ClassDeclarationSyntax?>)> records
            = context.CompilationProvider.Combine(syntaxProvider.Collect());

        context.RegisterSourceOutput(records, (context, input) =>
        {
            var compilation = input.Item1;
            var items = input.Item2;
            var matches = items.Where(x => x?.SyntaxTree is not null)
                .Select(x => compilation.GetSemanticModel(x!.SyntaxTree)?.GetDeclaredSymbol(x))
                .Where(x => x is not null && x is ITypeSymbol typeSymbol &&
                            typeSymbol.AllInterfaces.Any(x => x.ToDisplayString() == controllerInterface))
                .Cast<ISymbol>()
                .ToImmutableArray();
            if (matches.Any())
            {
                var body = string.Join("\n        ",
                    matches.Select(x => @$"services.AddSingleton<IController, {x!.Name}>();"));
                context.AddSource("AutoControllers.g.cs", SourceText.From($@"
// <auto-generated />
namespace Maestro.Controllers;

public partial class AutoControllers {{
    partial void RegisterControllers(IServiceCollection services) {{
        {body}
    }}

}}
                ", Encoding.UTF8));
            }
        });
    }
}
